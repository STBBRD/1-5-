import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import RinUI

ScrollView {
    id: tasksView

    property bool isDarkMode: false

    contentWidth: availableWidth
    contentHeight: mainColumn.implicitHeight
    property var tasksModel: ListModel {
        // Ê∑ªÂä†‰∏Ä‰∫õÈªòËÆ§ÊµãËØïÊï∞ÊçÆÔºåÁ°Æ‰øùÈ°µÈù¢‰∏ç‰∏∫Á©∫
        ListElement {
            task_id: "1"  // ‰ΩøÁî®Â≠óÁ¨¶‰∏≤Á±ªÂûã
            title: "Á§∫‰æã‰ªªÂä°1"
            description: "ËøôÊòØ‰∏Ä‰∏™Á§∫‰æã‰ªªÂä°"
            priority: "È´ò"
            status: "ËøõË°å‰∏≠"
            due_date: "2025-01-20"
            completed: false
        }
        ListElement {
            task_id: "2"  // ‰ΩøÁî®Â≠óÁ¨¶‰∏≤Á±ªÂûã
            title: "Á§∫‰æã‰ªªÂä°2"
            description: "ËøôÊòØÂè¶‰∏Ä‰∏™Á§∫‰æã‰ªªÂä°"
            priority: "‰∏≠"
            status: "Â∑≤ÂÆåÊàê"
            due_date: "2025-01-18"
            completed: true
        }
    }

    Column {
        id: mainColumn
        width: tasksView.availableWidth - 40
        x: 20
        y: 20
        spacing: 20

        // Ê†áÈ¢òÂíåÊìç‰ΩúÊåâÈíÆ
        Row {
            width: parent.width
            spacing: 10

            Text {
                text: qsTr("‰ªªÂä°ÁÆ°ÁêÜ")
                font.pixelSize: 24
                font.bold: true
                color: isDarkMode ? "#ffffff" : "#000000"
                anchors.verticalCenter: parent.verticalCenter
            }

            Item { width: parent.width - 300 }

            Button {
                text: qsTr("Êñ∞Âª∫‰ªªÂä°")
                onClicked: newTaskDialog.open()
            }

            Button {
                text: qsTr("Âà∑Êñ∞")
                onClicked: loadTasks()
            }
        }

        // ‰ªªÂä°ÁªüËÆ°
        Row {
            width: parent.width
            spacing: 20

            Frame {
                width: 150
                height: 80

                Column {
                    anchors.centerIn: parent
                    spacing: 5

                    Text {
                        text: "üìã" // "pending_actions"
                        font.pixelSize: 24
                        color: "#ff9800"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        text: qsTr("ÂæÖÂäû‰ªªÂä°")
                        font.pixelSize: 14
                        color: isDarkMode ? "#cccccc" : "#666666"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        text: getPendingTasksCount().toString()
                        font.pixelSize: 20
                        font.bold: true
                        color: isDarkMode ? "#ffffff" : "#000000"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                }
            }

            Frame {
                width: 150
                height: 80

                Column {
                    anchors.centerIn: parent
                    spacing: 5

                    Text {
                        text: qsTr("Â∑≤ÂÆåÊàê")
                        font.pixelSize: 14
                        color: isDarkMode ? "#cccccc" : "#666666"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        id: completedTasksCount
                        text: getCompletedTasksCount().toString()
                        font.pixelSize: 20
                        font.bold: true
                        color: "#4caf50"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                }
            }
        }

        // ‰ªªÂä°ÂàóË°®
        Rectangle {
            width: parent.width
            height: 400
            color: isDarkMode ? "#2d2d2d" : "#ffffff"
            radius: 8
            border.color: isDarkMode ? "#404040" : "#e0e0e0"
            border.width: 1

            Column {
                anchors.fill: parent
                anchors.margins: 10
                spacing: 10

                Text {
                    text: qsTr("‰ªªÂä°ÂàóË°®")
                    font.pixelSize: 16
                    font.bold: true
                    color: isDarkMode ? "#ffffff" : "#000000"
                }

                ListView {
                    width: parent.width
                    height: parent.height - 40
                    model: tasksModel
                    spacing: 8

                    delegate: Rectangle {
                        width: ListView.view ? ListView.view.width : 400
                        height: 80
                        color: isDarkMode ? "#3d3d3d" : "#f9f9f9"
                        radius: 6
                        border.color: isDarkMode ? "#505050" : "#e0e0e0"
                        border.width: 1

                        Row {
                            anchors.fill: parent
                            anchors.margins: 15
                            spacing: 15

                            Column {
                                width: parent.width - 120
                                spacing: 5

                                Text {
                                    text: model.title || "Êú™Áü•‰ªªÂä°"
                                    font.pixelSize: 16
                                    font.bold: true
                                    color: isDarkMode ? "#ffffff" : "#000000"
                                }

                                Text {
                                    text: model.description || "Êó†ÊèèËø∞"
                                    font.pixelSize: 12
                                    color: isDarkMode ? "#cccccc" : "#666666"
                                    wrapMode: Text.WordWrap
                                }

                                Text {
                                    text: qsTr("‰ºòÂÖàÁ∫ß: ") + (model.priority || "‰∏≠") + qsTr(" | Êà™Ê≠¢: ") + (model.due_date || "Êó†")
                                    font.pixelSize: 10
                                    color: isDarkMode ? "#aaaaaa" : "#888888"
                                }
                            }

                            Column {
                                width: 100
                                spacing: 5

                                Button {
                                    text: model.completed ? qsTr("Â∑≤ÂÆåÊàê") : qsTr("ÂÆåÊàê")
                                    width: 80
                                    height: 25
                                    enabled: !model.completed
                                    onClicked: {
                                        toggleTaskStatus(model.task_id, !model.completed)
                                    }
                                }

                                Button {
                                    text: qsTr("Âà†Èô§")
                                    width: 80
                                    height: 25
                                    onClicked: {
                                        deleteTask(model.task_id)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Êñ∞Âª∫‰ªªÂä°ÂØπËØùÊ°Ü
    Dialog {
        id: newTaskDialog
        title: qsTr("Êñ∞Âª∫‰ªªÂä°")
        width: 400
        height: 350
        modal: true
        anchors.centerIn: parent

        Column {
            anchors.fill: parent
            anchors.margins: 20
            spacing: 15

            TextField {
                id: taskTitleField
                width: parent.width
                placeholderText: qsTr("‰ªªÂä°Ê†áÈ¢ò")
            }

            ScrollView {
                width: parent.width
                height: 80

                TextArea {
                    id: taskDescriptionField
                    placeholderText: qsTr("‰ªªÂä°ÊèèËø∞")
                    wrapMode: TextArea.Wrap
                }
            }

            ComboBox {
                id: taskPriorityCombo
                width: parent.width
                model: [qsTr("‰Ωé"), qsTr("‰∏≠"), qsTr("È´ò")]
                currentIndex: 1
            }

            TextField {
                id: taskDueDateField
                width: parent.width
                placeholderText: qsTr("Êà™Ê≠¢Êó•Êúü (YYYY-MM-DD)")
            }

            Row {
                width: parent.width
                spacing: 10

                Button {
                    text: qsTr("ÂèñÊ∂à")
                    onClicked: {
                        newTaskDialog.close()
                        clearTaskForm()
                    }
                }

                Button {
                    text: qsTr("ÂàõÂª∫")
                    enabled: taskTitleField.text.trim() !== ""
                    onClicked: {
                        if (addNewTask()) {
                            newTaskDialog.close()
                            clearTaskForm()
                        }
                    }
                }
            }
        }
    }

    // JavaScript ÂáΩÊï∞
    function loadTasks() {
        if (typeof timeNestBridge !== 'undefined') {
            var tasks = timeNestBridge.getTasksData()
            tasksModel.clear()
            for (var i = 0; i < tasks.length; i++) {
                tasksModel.append(tasks[i])
            }
        }
        updateTaskCounts()
    }

    function addNewTask() {
        if (typeof timeNestBridge !== 'undefined') {
            var success = timeNestBridge.addTask(
                taskTitleField.text.trim(),
                taskDescriptionField.text.trim(),
                taskPriorityCombo.currentText,
                taskDueDateField.text.trim()
            )
            if (success) {
                loadTasks()
                return true
            }
        }
        return false
    }

    function toggleTaskStatus(taskId, completed) {
        if (typeof timeNestBridge !== 'undefined') {
            try {
                console.log("ÂàáÊç¢‰ªªÂä°Áä∂ÊÄÅ:", taskId, completed)
                var success = timeNestBridge.updateTaskStatus(taskId, completed)
                if (success) {
                    console.log("‰ªªÂä°Áä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü")
                    loadTasks()
                    // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                    if (typeof timeNestBridge.showNotification !== 'undefined') {
                        timeNestBridge.showNotification("‰ªªÂä°ÁÆ°ÁêÜ", completed ? "‰ªªÂä°Â∑≤ÂÆåÊàê" : "‰ªªÂä°Â∑≤ÈáçÊñ∞ÊøÄÊ¥ª")
                    }
                } else {
                    console.log("‰ªªÂä°Áä∂ÊÄÅÊõ¥Êñ∞Â§±Ë¥•")
                    // ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                    if (typeof timeNestBridge.showNotification !== 'undefined') {
                        timeNestBridge.showNotification("‰ªªÂä°ÁÆ°ÁêÜ", "Êõ¥Êñ∞‰ªªÂä°Áä∂ÊÄÅÂ§±Ë¥•")
                    }
                }
            } catch (e) {
                console.log("ÂàáÊç¢‰ªªÂä°Áä∂ÊÄÅÂºÇÂ∏∏:", e)
            }
        }
    }

    function deleteTask(taskId) {
        if (typeof timeNestBridge !== 'undefined') {
            try {
                console.log("Âà†Èô§‰ªªÂä°:", taskId)
                var success = timeNestBridge.deleteTask(taskId)
                if (success) {
                    console.log("‰ªªÂä°Âà†Èô§ÊàêÂäü")
                    loadTasks()
                    // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                    if (typeof timeNestBridge.showNotification !== 'undefined') {
                        timeNestBridge.showNotification("‰ªªÂä°ÁÆ°ÁêÜ", "‰ªªÂä°Â∑≤Âà†Èô§")
                    }
                } else {
                    console.log("‰ªªÂä°Âà†Èô§Â§±Ë¥•")
                    // ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                    if (typeof timeNestBridge.showNotification !== 'undefined') {
                        timeNestBridge.showNotification("‰ªªÂä°ÁÆ°ÁêÜ", "Âà†Èô§‰ªªÂä°Â§±Ë¥•")
                    }
                }
            } catch (e) {
                console.log("Âà†Èô§‰ªªÂä°ÂºÇÂ∏∏:", e)
            }
        }
    }

    function clearTaskForm() {
        taskTitleField.text = ""
        taskDescriptionField.text = ""
        taskDueDateField.text = ""
        taskPriorityCombo.currentIndex = 1
    }

    function getPendingTasksCount() {
        var count = 0
        for (var i = 0; i < tasksModel.count; i++) {
            if (!tasksModel.get(i).completed) {
                count++
            }
        }
        return count
    }

    function getCompletedTasksCount() {
        var count = 0
        for (var i = 0; i < tasksModel.count; i++) {
            if (tasksModel.get(i).completed) {
                count++
            }
        }
        return count
    }

    function updateTaskCounts() {
        // ‰ªªÂä°ËÆ°Êï∞Áé∞Âú®ÈÄöËøáSettingCardÁöÑdescriptionÂ±ûÊÄßÊòæÁ§∫ÔºåÊó†ÈúÄÊâãÂä®Êõ¥Êñ∞
    }

    // ÁªÑ‰ª∂Âä†ËΩΩÂÆåÊàêÊó∂Âä†ËΩΩ‰ªªÂä°
    Component.onCompleted: {
        loadTasks()
    }

    // ÁõëÂê¨‰ªªÂä°ÂèòÂåñ‰ø°Âè∑
    Connections {
        target: typeof timeNestBridge !== 'undefined' ? timeNestBridge : null
        function onTasksChanged() {
            loadTasks()
        }
    }
}
