name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 推送标签时触发发布
    branches: [ main, develop ]  # 推送到分支时只构建，不发布
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手动触发

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Convert PNG to ICO (if needed)
      run: |
        if (!(Test-Path "resources\icons\tray_icon.ico")) {
          echo "Converting PNG to ICO format..."
          # 如果没有ico文件，可以使用在线转换或其他工具
          # 这里先跳过，使用PNG文件
        }
        
    - name: Set UTF-8 encoding
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $env:PYTHONIOENCODING = "utf-8"
      shell: pwsh

    - name: Build executable with spec
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $env:PYTHONIOENCODING = "utf-8"

        if (Test-Path "TimeNest.spec") {
          echo "Building with spec file..."
          pyinstaller TimeNest.spec --clean --noconfirm
        } elseif (Test-Path "build_simple.py") {
          echo "Using simple build script..."
          python build_simple.py
        } else {
          echo "Using fallback build script..."
          python build_fallback.py
        }
      shell: pwsh
        
    - name: Create portable package
      run: |
        mkdir TimeNest-portable
        copy dist\TimeNest.exe TimeNest-portable\
        copy README.md TimeNest-portable\
        copy LICENSE TimeNest-portable\
        if (Test-Path "config") { xcopy /E /I config TimeNest-portable\config }
        if (Test-Path "resources") { xcopy /E /I resources TimeNest-portable\resources }
        if (Test-Path "themes") { xcopy /E /I themes TimeNest-portable\themes }
        if (Test-Path "schedule_template.xlsx") { copy schedule_template.xlsx TimeNest-portable\ }
        
    - name: Create ZIP archive
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          Compress-Archive -Path TimeNest-portable\* -DestinationPath TimeNest-${{ github.ref_name }}-windows.zip
        } elseif ("${{ github.ref_name }}" -eq "main") {
          # 从app_info.json读取版本信息用于文件名
          $appInfo = Get-Content app_info.json | ConvertFrom-Json
          $version = $appInfo.version.number
          Compress-Archive -Path TimeNest-portable\* -DestinationPath TimeNest-v$version-windows.zip
        } else {
          Compress-Archive -Path TimeNest-portable\* -DestinationPath TimeNest-${{ github.sha }}-windows.zip
        }

    - name: Get release info
      id: release_info
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          $tag = "${{ github.ref_name }}"
          $version = $tag -replace '^v', ''
        } else {
          # 从app_info.json读取版本信息
          $appInfo = Get-Content app_info.json | ConvertFrom-Json
          $version = $appInfo.version.number
          $tag = "v$version"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "tag=$tag" >> $env:GITHUB_OUTPUT

    - name: Create Release
      if: github.ref_name == 'main' || github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.tag }}
        name: TimeNest ${{ steps.release_info.outputs.version }}
        body: |
          ## TimeNest ${{ steps.release_info.outputs.version }}

          ### 📦 下载
          - **Windows 便携版**: TimeNest-${{ steps.release_info.outputs.tag }}-windows.zip

          ### 🚀 新功能
          - 🔧 UI组件修复：修复了RinUI组件使用问题，所有页面现在正常显示
          - ⚙️ 设置页面优化：使用原生SettingCard组件，提供更好的设置体验
          - 🎨 界面稳定性：解决了页面空白和组件冲突问题
          - 📱 响应式布局：优化了ScrollView和布局系统

          ### 🐛 修复
          - 🚀 性能提升：移除了冲突的自定义组件，提升运行稳定性
          - 修复RinUI组件属性错误导致的显示问题
          - 优化页面布局和组件定位逻辑

          ### 📋 安装说明
          1. 下载 ZIP 文件
          2. 解压到任意目录
          3. 运行 TimeNest.exe

          ### 💡 系统要求
          - Windows 10/11
          - Python 3.8+ (如果从源码运行)
          - RinUI 框架支持

          ### ⚠️ 注意事项
          这是一个预览版本，包含最新的 RinUI 界面改进。建议在测试环境中先行体验。
        draft: false
        prerelease: ${{ contains(steps.release_info.outputs.version, 'Preview') || contains(steps.release_info.outputs.version, 'Beta') || contains(steps.release_info.outputs.version, 'RC') }}
        files: |
          TimeNest-${{ steps.release_info.outputs.tag }}-windows.zip

    - name: Upload Build Artifacts (for non-release builds)
      if: github.ref_name != 'main' && github.ref_type != 'tag'
      uses: actions/upload-artifact@v4
      with:
        name: TimeNest-${{ github.sha }}-windows
        path: TimeNest-${{ github.sha }}-windows.zip
        retention-days: 30