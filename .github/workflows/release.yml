name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 推送标签时触发发布
    branches: [ main, develop ]  # 推送到分支时只构建，不发布
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手动触发

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Convert PNG to ICO (if needed)
      run: |
        if (!(Test-Path "resources\icons\tray_icon.ico")) {
          echo "Converting PNG to ICO format..."
          # 如果没有ico文件，可以使用在线转换或其他工具
          # 这里先跳过，使用PNG文件
        }
        
    - name: Set UTF-8 encoding
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $env:PYTHONIOENCODING = "utf-8"
      shell: pwsh

    - name: Build executable with spec
      run: |
        $OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $env:PYTHONIOENCODING = "utf-8"

        if (Test-Path "TimeNest.spec") {
          echo "Building with spec file..."
          pyinstaller TimeNest.spec --clean --noconfirm
        } elseif (Test-Path "build_simple.py") {
          echo "Using simple build script..."
          python build_simple.py
        } else {
          echo "Using fallback build script..."
          python build_fallback.py
        }
      shell: pwsh
        
    - name: Create portable package
      run: |
        mkdir TimeNest-portable
        copy dist\TimeNest.exe TimeNest-portable\
        copy README.md TimeNest-portable\
        copy LICENSE TimeNest-portable\
        if (Test-Path "config") { xcopy /E /I config TimeNest-portable\config }
        if (Test-Path "resources") { xcopy /E /I resources TimeNest-portable\resources }
        if (Test-Path "themes") { xcopy /E /I themes TimeNest-portable\themes }
        if (Test-Path "schedule_template.xlsx") { copy schedule_template.xlsx TimeNest-portable\ }
        
    - name: Create ZIP archive
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          Compress-Archive -Path TimeNest-portable\* -DestinationPath TimeNest-${{ github.ref_name }}-windows.zip
        } elseif ("${{ github.ref_name }}" -eq "main") {
          # 从app_info.json读取版本信息用于文件名
          $appInfo = Get-Content app_info.json | ConvertFrom-Json
          $version = $appInfo.version.number
          Compress-Archive -Path TimeNest-portable\* -DestinationPath TimeNest-v$version-windows.zip
        } else {
          Compress-Archive -Path TimeNest-portable\* -DestinationPath TimeNest-${{ github.sha }}-windows.zip
        }

    - name: Get release info
      id: release_info
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          $tag = "${{ github.ref_name }}"
          $version = $tag -replace '^v', ''
        } else {
          # 从app_info.json读取版本信息
          $appInfo = Get-Content app_info.json | ConvertFrom-Json
          $version = $appInfo.version.number
          $tag = "v$version"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "tag=$tag" >> $env:GITHUB_OUTPUT

    - name: Upload Windows package to release
      if: github.ref_name == 'main' || github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_info.outputs.tag }}
        name: TimeNest ${{ steps.release_info.outputs.version }}
        body: |
          ## TimeNest ${{ steps.release_info.outputs.version }}

          ### 📦 Windows 下载
          - **Windows 便携版**: TimeNest-${{ steps.release_info.outputs.tag }}-windows.zip

          ### 🚀 新功能
          - 🔧 UI组件修复：修复了RinUI组件使用问题，所有页面现在正常显示
          - ⚙️ 设置页面优化：使用原生SettingCard组件，提供更好的设置体验
          - 🎨 界面稳定性：解决了页面空白和组件冲突问题
          - 📱 响应式布局：优化了ScrollView和布局系统

          ### 🐛 修复
          - 🚀 性能提升：移除了冲突的自定义组件，提升运行稳定性
          - 修复RinUI组件属性错误导致的显示问题
          - 优化页面布局和组件定位逻辑

          ### 📋 Windows 安装说明
          1. 下载 ZIP 文件
          2. 解压到任意目录
          3. 运行 TimeNest.exe

          ### 💡 系统要求
          - Windows 10/11
          - Python 3.8+ (如果从源码运行)
          - RinUI 框架支持

          ### ⚠️ 注意事项
          这是一个预览版本，包含最新的 RinUI 界面改进。建议在测试环境中先行体验。
        draft: false
        prerelease: ${{ contains(steps.release_info.outputs.version, 'Preview') || contains(steps.release_info.outputs.version, 'Beta') || contains(steps.release_info.outputs.version, 'RC') }}
        files: |
          TimeNest-${{ steps.release_info.outputs.tag }}-windows.zip

    - name: Upload Build Artifacts (for non-release builds)
      if: github.ref_name != 'main' && github.ref_type != 'tag'
      uses: actions/upload-artifact@v4
      with:
        name: TimeNest-${{ github.sha }}-windows
        path: TimeNest-${{ github.sha }}-windows.zip
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-tk \
          build-essential \
          fakeroot \
          devscripts \
          debhelper \
          dh-python \
          rpm \
          alien \
          git \
          desktop-file-utils \
          qt6-base-dev \
          qt6-tools-dev \
          libgl1-mesa-dev \
          libegl1-mesa-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # 安装基础依赖
        pip install pyinstaller
        # 安装项目依赖，忽略可能的错误
        pip install -r requirements.txt || echo "Some dependencies may have failed, continuing..."
        # 确保关键依赖已安装
        pip install PySide6 PyYAML requests pandas numpy openpyxl

    - name: Build Linux executable
      run: |
        # 设置环境变量
        export QT_QPA_PLATFORM=offscreen
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        export DISPLAY=:99

        # 启动虚拟显示（如果需要）
        sudo apt-get install -y xvfb || true
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

        # 构建可执行文件
        pyinstaller --onefile \
          --name TimeNest \
          --add-data "qml:qml" \
          --add-data "resources:resources" \
          --add-data "themes:themes" \
          --add-data "config:config" \
          --add-data "app_info.json:." \
          --hidden-import PySide6.QtCore \
          --hidden-import PySide6.QtGui \
          --hidden-import PySide6.QtWidgets \
          --hidden-import PySide6.QtQml \
          --hidden-import PySide6.QtQuick \
          --hidden-import RinUI \
          --hidden-import utils.common_imports \
          --hidden-import utils.shared_utilities \
          --hidden-import utils.config_constants \
          --windowed \
          main.py

    - name: Get version info
      id: version_info
      run: |
        if [ "${{ github.ref_type }}" = "tag" ]; then
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}
        else
          VERSION=$(python -c "import json; print(json.load(open('app_info.json'))['version']['number'])")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Create application directory structure
      run: |
        mkdir -p TimeNest-${{ steps.version_info.outputs.version }}/usr/bin
        mkdir -p TimeNest-${{ steps.version_info.outputs.version }}/usr/share/applications
        mkdir -p TimeNest-${{ steps.version_info.outputs.version }}/usr/share/pixmaps
        mkdir -p TimeNest-${{ steps.version_info.outputs.version }}/usr/share/doc/timenest

        # 复制可执行文件
        cp dist/TimeNest TimeNest-${{ steps.version_info.outputs.version }}/usr/bin/timenest
        chmod +x TimeNest-${{ steps.version_info.outputs.version }}/usr/bin/timenest

        # 创建桌面文件
        cat > TimeNest-${{ steps.version_info.outputs.version }}/usr/share/applications/timenest.desktop << EOF
        [Desktop Entry]
        Name=TimeNest
        Comment=智能时间管理助手
        Exec=timenest
        Icon=timenest
        Terminal=false
        Type=Application
        Categories=Office;Utility;
        StartupNotify=true
        EOF

        # 复制图标（如果存在）
        if [ -f "resources/icons/app_icon.png" ]; then
          cp resources/icons/app_icon.png TimeNest-${{ steps.version_info.outputs.version }}/usr/share/pixmaps/timenest.png
        fi

        # 复制文档
        cp README.md TimeNest-${{ steps.version_info.outputs.version }}/usr/share/doc/timenest/
        cp LICENSE TimeNest-${{ steps.version_info.outputs.version }}/usr/share/doc/timenest/ || echo "LICENSE file not found"

    - name: Create Debian package
      run: |
        VERSION=${{ steps.version_info.outputs.version }}

        # 创建DEBIAN控制目录
        mkdir -p TimeNest-$VERSION/DEBIAN

        # 创建control文件
        cat > TimeNest-$VERSION/DEBIAN/control << EOF
        Package: timenest
        Version: $VERSION
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: python3 (>= 3.8), python3-tk, libqt6core6, libqt6gui6, libqt6widgets6
        Maintainer: ziyi127 <ziyihed@outlook.com>
        Description: 智能时间管理助手
         TimeNest是一个基于Python、RinUI和PySide6开发的现代化课程表管理工具，
         专为学生、教师和教育工作者设计。提供智能时间管理、课程表管理、
         任务提醒、悬浮窗显示等功能。
        Homepage: https://ziyi127.github.io/TimeNest-Website
        EOF

        # 创建postinst脚本
        cat > TimeNest-$VERSION/DEBIAN/postinst << EOF
        #!/bin/bash
        set -e
        update-desktop-database || true
        EOF
        chmod +x TimeNest-$VERSION/DEBIAN/postinst

        # 创建prerm脚本
        cat > TimeNest-$VERSION/DEBIAN/prerm << EOF
        #!/bin/bash
        set -e
        update-desktop-database || true
        EOF
        chmod +x TimeNest-$VERSION/DEBIAN/prerm

        # 构建deb包
        dpkg-deb --build TimeNest-$VERSION
        mv TimeNest-$VERSION.deb timenest_$VERSION-1_amd64.deb

    - name: Create RPM package
      run: |
        VERSION=${{ steps.version_info.outputs.version }}

        # 创建RPM构建目录结构
        mkdir -p rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

        # 创建spec文件
        cat > rpmbuild/SPECS/timenest.spec << EOF
        Name:           timenest
        Version:        $VERSION
        Release:        1%{?dist}
        Summary:        智能时间管理助手

        License:        MIT
        URL:            https://ziyi127.github.io/TimeNest-Website
        Source0:        %{name}-%{version}.tar.gz

        BuildRequires:  python3-devel
        Requires:       python3 >= 3.8, python3-tkinter, qt6-qtbase

        %description
        TimeNest是一个基于Python、RinUI和PySide6开发的现代化课程表管理工具，
        专为学生、教师和教育工作者设计。提供智能时间管理、课程表管理、
        任务提醒、悬浮窗显示等功能。

        %prep
        %setup -q

        %build
        # 已经预构建

        %install
        rm -rf \$RPM_BUILD_ROOT
        mkdir -p \$RPM_BUILD_ROOT/usr/bin
        mkdir -p \$RPM_BUILD_ROOT/usr/share/applications
        mkdir -p \$RPM_BUILD_ROOT/usr/share/pixmaps
        mkdir -p \$RPM_BUILD_ROOT/usr/share/doc/%{name}

        cp ../dist/TimeNest \$RPM_BUILD_ROOT/usr/bin/timenest
        cp ../TimeNest-$VERSION/usr/share/applications/timenest.desktop \$RPM_BUILD_ROOT/usr/share/applications/
        cp ../resources/app_icon.png \$RPM_BUILD_ROOT/usr/share/pixmaps/timenest.png || true
        cp ../README.md \$RPM_BUILD_ROOT/usr/share/doc/%{name}/
        cp ../LICENSE \$RPM_BUILD_ROOT/usr/share/doc/%{name}/ || true

        %files
        /usr/bin/timenest
        /usr/share/applications/timenest.desktop
        /usr/share/pixmaps/timenest.png
        /usr/share/doc/%{name}/README.md
        /usr/share/doc/%{name}/LICENSE

        %post
        update-desktop-database &> /dev/null || :

        %postun
        update-desktop-database &> /dev/null || :

        %changelog
        * $(date +'%a %b %d %Y') ziyi127 <ziyihed@outlook.com> - $VERSION-1
        - TimeNest $VERSION release
        EOF

        # 创建源码包
        cd ..
        tar -czf rpmbuild/SOURCES/timenest-$VERSION.tar.gz \
          --transform "s,^,timenest-$VERSION/," \
          dist/TimeNest \
          TimeNest-$VERSION/usr/share/applications/timenest.desktop \
          README.md LICENSE || echo "Some files may be missing, continuing..."
        cd rpmbuild

        # 构建RPM包
        rpmbuild --define "_topdir $(pwd)" -ba SPECS/timenest.spec || echo "RPM build failed, creating simple archive instead"

        # 复制生成的RPM包或创建备用包
        if [ -f "RPMS/x86_64/timenest-$VERSION-1.*.rpm" ]; then
          cp RPMS/x86_64/timenest-$VERSION-1.*.rpm ../
        else
          # 创建简单的tar.gz作为备用
          cd ..
          tar -czf timenest-$VERSION-1.x86_64.rpm.tar.gz TimeNest-$VERSION/
        fi
        cd ..

    - name: Create Arch Linux package
      run: |
        VERSION=${{ steps.version_info.outputs.version }}

        # 安装makepkg依赖
        sudo apt-get install -y binutils fakeroot

        # 创建PKGBUILD目录
        mkdir -p archpkg
        cd archpkg

        # 创建PKGBUILD文件
        cat > PKGBUILD << EOF
        # Maintainer: ziyi127 <ziyihed@outlook.com>
        pkgname=timenest
        pkgver=$VERSION
        pkgrel=1
        pkgdesc="智能时间管理助手"
        arch=('x86_64')
        url="https://ziyi127.github.io/TimeNest-Website"
        license=('MIT')
        depends=('python' 'python-pyside6' 'qt6-base')
        makedepends=('python-build' 'python-installer' 'python-wheel')
        source=("timenest-\$pkgver.tar.gz")
        sha256sums=('SKIP')

        package() {
            install -Dm755 "../dist/TimeNest" "\$pkgdir/usr/bin/timenest"
            install -Dm644 "../TimeNest-$VERSION/usr/share/applications/timenest.desktop" "\$pkgdir/usr/share/applications/timenest.desktop"
            install -Dm644 "../README.md" "\$pkgdir/usr/share/doc/\$pkgname/README.md"
            if [ -f "../LICENSE" ]; then
                install -Dm644 "../LICENSE" "\$pkgdir/usr/share/licenses/\$pkgname/LICENSE"
            fi
            if [ -f "../resources/icons/app_icon.png" ]; then
                install -Dm644 "../resources/icons/app_icon.png" "\$pkgdir/usr/share/pixmaps/timenest.png"
            fi
        }
        EOF

        # 创建源码包
        tar -czf timenest-$VERSION.tar.gz -C .. dist/TimeNest README.md LICENSE

        # 构建包（在Ubuntu上模拟，实际应该在Arch上构建）
        # 这里我们创建一个tar.xz包作为替代
        cd ..
        mkdir -p archpkg-built/usr/bin
        mkdir -p archpkg-built/usr/share/applications
        mkdir -p archpkg-built/usr/share/doc/timenest
        mkdir -p archpkg-built/usr/share/pixmaps

        cp dist/TimeNest archpkg-built/usr/bin/timenest
        cp TimeNest-$VERSION/usr/share/applications/timenest.desktop archpkg-built/usr/share/applications/
        cp README.md archpkg-built/usr/share/doc/timenest/
        cp LICENSE archpkg-built/usr/share/doc/timenest/ || true
        if [ -f "resources/icons/app_icon.png" ]; then
          cp resources/icons/app_icon.png archpkg-built/usr/share/pixmaps/timenest.png
        fi

        # 创建包信息文件
        cat > archpkg-built/.PKGINFO << EOF
        pkgname = timenest
        pkgver = $VERSION-1
        pkgdesc = 智能时间管理助手
        url = https://ziyi127.github.io/TimeNest-Website
        builddate = $(date +%s)
        packager = ziyi127 <ziyihed@outlook.com>
        size = $(du -sb archpkg-built | cut -f1)
        arch = x86_64
        depend = python
        depend = python-pyside6
        depend = qt6-base
        EOF

        # 创建tar.xz包
        cd archpkg-built
        tar -cJf ../timenest-$VERSION-1-x86_64.pkg.tar.xz .
        cd ..

    - name: Upload Linux packages to release
      if: github.ref_name == 'main' || github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.tag }}
        name: TimeNest ${{ steps.version_info.outputs.version }}
        body: |
          ## TimeNest ${{ steps.version_info.outputs.version }} - Linux 安装包

          ### 📦 Linux 下载
          - **Debian/Ubuntu**: timenest_${{ steps.version_info.outputs.version }}-1_amd64.deb
          - **Red Hat/CentOS/Fedora**: timenest-${{ steps.version_info.outputs.version }}-1.x86_64.rpm
          - **Arch Linux**: timenest-${{ steps.version_info.outputs.version }}-1-x86_64.pkg.tar.xz

          ### 📋 安装说明

          **Debian/Ubuntu:**
          ```bash
          sudo dpkg -i timenest_${{ steps.version_info.outputs.version }}-1_amd64.deb
          sudo apt-get install -f  # 解决依赖问题
          ```

          **Red Hat/CentOS/Fedora:**
          ```bash
          sudo rpm -ivh timenest-${{ steps.version_info.outputs.version }}-1.x86_64.rpm
          # 或使用 dnf/yum
          sudo dnf install timenest-${{ steps.version_info.outputs.version }}-1.x86_64.rpm
          ```

          **Arch Linux:**
          ```bash
          sudo pacman -U timenest-${{ steps.version_info.outputs.version }}-1-x86_64.pkg.tar.xz
          ```

          ### 🚀 运行
          安装完成后，可以通过以下方式启动：
          - 命令行: `timenest`
          - 应用菜单: 搜索 "TimeNest"
        draft: false
        prerelease: ${{ contains(steps.version_info.outputs.version, 'Preview') || contains(steps.version_info.outputs.version, 'Beta') || contains(steps.version_info.outputs.version, 'RC') }}
        files: |
          timenest_${{ steps.version_info.outputs.version }}-1_amd64.deb
          timenest-${{ steps.version_info.outputs.version }}-1*.rpm*
          timenest-${{ steps.version_info.outputs.version }}-1-x86_64.pkg.tar.xz

    - name: Upload Linux artifacts (for non-release builds)
      if: github.ref_name != 'main' && github.ref_type != 'tag'
      uses: actions/upload-artifact@v4
      with:
        name: TimeNest-${{ github.sha }}-linux-packages
        path: |
          timenest_${{ steps.version_info.outputs.version }}-1_amd64.deb
          timenest-${{ steps.version_info.outputs.version }}-1*.rpm*
          timenest-${{ steps.version_info.outputs.version }}-1-x86_64.pkg.tar.xz
        retention-days: 30